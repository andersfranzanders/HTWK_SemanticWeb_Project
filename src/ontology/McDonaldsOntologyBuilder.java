package ontology;

import java.util.List;

import classModel.McDonaldsRestaurant;
import classModel.ResourceClass;
import classModel.State;

import com.hp.hpl.jena.ontology.DatatypeProperty;
import com.hp.hpl.jena.ontology.Individual;
import com.hp.hpl.jena.ontology.ObjectProperty;
import com.hp.hpl.jena.ontology.OntClass;
import com.hp.hpl.jena.ontology.OntModel;
import com.hp.hpl.jena.rdf.model.ModelFactory;

public class McDonaldsOntologyBuilder extends OntologyBuilder {
	
	String uriMcDonaldsClass = dbPedia + "McDonalds";
	String nameSpaceMcDonalds = "http://www.imn.htwk-leipzig.de/~fanders/McDonalds/";

	OntModel mcDonaldsModel = ModelFactory.createOntologyModel(modelSpec);
	OntClass McDonaldsClass = mcDonaldsModel.createClass(uriMcDonaldsClass);

	DatatypeProperty addressProperty = mcDonaldsModel.createDatatypeProperty(geoNames + "address");
	DatatypeProperty nameProperty = mcDonaldsModel.createDatatypeProperty(dublinCoreOnt + "Description");
	ObjectProperty cityProperty = mcDonaldsModel.createObjectProperty(dbPediaOnt + "currentCity");
	

	@Override
	public void initializeModel() {
		McDonaldsClass.addLabel("This is a McDonalds Restaurant", "eng");
		
		mcDonaldsModel.setNsPrefix("own", nameSpace_PROPERTYS);
		mcDonaldsModel.setNsPrefix("dbo", dbPediaOnt);
		mcDonaldsModel.setNsPrefix("dbp", dbPedia);
		mcDonaldsModel.setNsPrefix("geo", geoNames);
		mcDonaldsModel.setNsPrefix("dbu", dublinCoreOnt);
		
		addressProperty.setLabel("The Address of the McDonalds Name","eng");
		nameProperty.setLabel("The Name of the McDonalds Restaurant. The name is automatically generated by "
				+ "the name of the city and a number", "eng");
		cityProperty.setLabel("The City this McDonald's Restaurant belongs to", "eng");
		
		addressProperty.addDomain(McDonaldsClass);
		nameProperty.addDomain(McDonaldsClass);
		cityProperty.addDomain(McDonaldsClass);


	}

	@Override
	public OntModel convertParsedDataToTriples(List<ResourceClass> rList) {
		
		for (ResourceClass resource : rList) {

			if (resource instanceof McDonaldsRestaurant) {

				McDonaldsRestaurant restaurant = (McDonaldsRestaurant) resource;
				Individual i = mcDonaldsModel.createIndividual(nameSpaceMcDonalds + restaurant.getName(), McDonaldsClass);
				i.addProperty(nameProperty, restaurant.getName());
				i.addProperty(addressProperty, restaurant.getAdress());
				i.addProperty(cityProperty, restaurant.getCityResource());
			}

		}
		return mcDonaldsModel;
	}

}
